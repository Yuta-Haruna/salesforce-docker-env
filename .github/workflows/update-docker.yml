name: Always Build Salesforce Dev Container

# トリガー設定
on:
  schedule:
    - cron: '0 13 1 * *'  # 毎月1日 13:00(UTC)に実行 → 日本時間では22時 or 23時前後ではなく、4時 (プラス9時間) になります
  workflow_dispatch:      # 手動実行も可能

jobs:
  update-docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write   # GHCR にプッシュするための書き込み権限

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. GHCR リポジトリ名の設定
      - name: Set Repository Name
        run: |
          # GitHub 上でのオーナー(ユーザー or Org)名を小文字に変換
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME="ghcr.io/${REPO_OWNER_LOWER}/salesforce-cli"

          # 環境変数 GITHUB_ENV に書き込み、後続ステップで使用
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

          echo "✅ Using GHCR Repository: $REPO_NAME"

      # 3. GHCR にログイン (Personal Access Token の GHCR_PAT を使用)
      - name: Login to GitHub Container Registry
        run: |
          # GitHub Container Registry (ghcr.io) へログイン
          # ここでは GHCR_PAT (Personal Access Token) を使用
          # ${{ github.actor }} は GitHub Actions を実行しているユーザー名を取得
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # 4. 最新の Salesforce CLI イメージを pull (ベースとして使用)
      - name: Pull latest Salesforce CLI image
        run: |
          # 公式の最新イメージを Pull
          # Node.js 含む “latest-full” が便利
          docker pull salesforce/cli:latest-full

      # 5. Docker イメージをビルド (常に再ビルド)
      - name: Build Docker image
        run: |
          IMAGE_TAG="${{ env.REPO_NAME }}:latest"
          echo "🛠 Building new image: $IMAGE_TAG"

          docker build -t "$IMAGE_TAG" .

      # 6. Docker イメージを push (latest のみ)　古いバージョンのタグは自動で変更される
      - name: Push Docker image
        run: |
          IMAGE_TAG="${{ env.REPO_NAME }}:latest"
          echo "📤 Pushing new image: $IMAGE_TAG"
          docker push "$IMAGE_TAG"

      # 7. Delete Old Tags (keep only latest)
      - name: Delete Old Tags
        run: |
          echo "🔄 Checking for existing tags in GHCR..."

          # GHCR に登録されているタグ一覧を取得 (curlでAPI呼び出し)
          TAGS_RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
            "https://ghcr.io/v2/${{ env.REPO_NAME }}/tags/list")

          echo "📝 GHCR API Response: $TAGS_RESPONSE"

          # jq で “tags” key を配列としてパースし、タグ名を取得
          EXISTING_TAGS=$(echo "$TAGS_RESPONSE" | jq -r '.tags[]? // empty')

          # タグがまったく存在しない場合 (初回実行時など) はスキップ
          if [[ -z "$EXISTING_TAGS" ]]; then
            echo "🚀 No existing tags found in GHCR. This is the first run. Skipping deletion."
            exit 0
          fi

          # latest 以外のタグをすべて削除する
          for TAG in $EXISTING_TAGS; do
            if [ "$TAG" != "latest" ]; then
              echo "🗑 Deleting old image tag: $TAG"
              curl -X DELETE \
                -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
                "https://ghcr.io/v2/${{ env.REPO_NAME }}/manifests/$TAG"
            fi
          done

      # 8. 結果表示
      - name: Output Status
        run: |
          echo "★★★ Docker image built & pushed as 'latest' ★★★"
