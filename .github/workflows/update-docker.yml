name: Update Salesforce Dev Container

# トリガー設定
on:
  schedule:
    - cron: '0 13 1 * *'  # 毎月1日 13:00(UTC)に実行 → 日本時間では22時 or 23時前後ではなく、4時 (プラス9時間) になります
  workflow_dispatch:      # 手動実行も可能

jobs:
  update-docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write   # GHCR にプッシュするための書き込み権限

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        # リポジトリのソースコードをチェックアウト（Dockerfileなどを利用するため）

      - name: Set Repository Name
        run: |
          # GitHub 上でのオーナー(ユーザー or Org)名を小文字に変換
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME="ghcr.io/${REPO_OWNER_LOWER}/salesforce-cli"

          # 環境変数 GITHUB_ENV に書き込み、後続ステップで使用
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

          echo "✅ Using GHCR Repository: $REPO_NAME"

      - name: Login to GitHub Container Registry
        run: |
          # GitHub Container Registry (ghcr.io) へログイン
          # 今回は GITHUB_TOKEN を使用
          # ${{ github.actor }} は GitHub Actions を実行しているユーザー名を取得
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Pull latest Salesforce CLI image
        run: |
          # 公式の最新イメージを Pull
          # Node.js 含む “latest-full” が便利
          docker pull salesforce/cli:latest-full

      - name: Get Salesforce CLI Version
        id: get-cli-version
        run: |
          # pulled イメージ内の “sf --version” コマンドでバージョンを取得
          CLI_VERSION_RAW=$(docker run --rm salesforce/cli:latest-full sf --version | awk '{print $1}')

          # 例: "salesforce-cli/2.77.6" から数値部分だけ抜き出す (sedで非数字を除去)
          CLI_VERSION=$(echo "$CLI_VERSION_RAW" | sed -E 's/[^0-9.]//g')

          # 環境変数として保存
          echo "CLI_VERSION=$CLI_VERSION" >> $GITHUB_ENV
          echo "🚀 Salesforce CLI version detected: $CLI_VERSION"

      - name: Check if Image Exists on GHCR
        id: check-image
        run: |
          # すでに “CLI_VERSION” タグのイメージが存在する場合は再ビルドをスキップする
          IMAGE_TAG="${{ env.REPO_NAME }}:${{ env.CLI_VERSION }}"

          if docker manifest inspect $IMAGE_TAG > /dev/null 2>&1; then
            echo "✅ Image already exists: $IMAGE_TAG"
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          else
            echo "❌ Image does not exist: $IMAGE_TAG"
            echo "SKIP_BUILD=false" >> $GITHUB_ENV
          fi

      - name: Delete Old Tags (Keep only latest)
        if: env.SKIP_BUILD == 'false'
        run: |
          echo "🔄 Checking for existing tags in GHCR..."

          # GHCR に登録されているタグ一覧を取得 (curlでAPI呼び出し)
          TAGS_RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ env.REPO_NAME }}/tags/list")

          echo "📝 GHCR API Response: $TAGS_RESPONSE"

          # jq で “tags” key を配列としてパースし、タグ名を取得
          EXISTING_TAGS=$(echo "$TAGS_RESPONSE" | jq -r '.tags[]? // empty')

          # タグがまったく存在しない場合 (初回実行時など) はスキップ
          if [[ -z "$EXISTING_TAGS" ]]; then
            echo "🚀 No existing tags found in GHCR. This is the first run. Skipping deletion."
            exit 0
          fi

          # 古いバージョンのタグを削除 (最新だけ残す)
          for TAG in $EXISTING_TAGS; do
            if [ "$TAG" != "${{ env.CLI_VERSION }}" ]; then
              echo "🗑 Deleting old image tag: $TAG"
              curl -X DELETE \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://ghcr.io/v2/${{ env.REPO_NAME }}/manifests/$TAG"
            fi
          done

      - name: Normalize Salesforce CLI Version for Docker Tag
        run: |
          # 念のため CLIバージョンの正規化 (数字とドットのみにする)
          CLI_VERSION_RAW="${{ env.CLI_VERSION }}"
          CLI_VERSION=$(echo "$CLI_VERSION_RAW" | sed -E 's/[^0-9.]//g')

          echo "CLI_VERSION_NORMALIZED=$CLI_VERSION" >> $GITHUB_ENV
          echo "🚀 Normalized CLI Version: $CLI_VERSION"

      - name: Build and Push Updated Image
        if: env.SKIP_BUILD == 'false'
        run: |
          IMAGE_TAG="${{ env.REPO_NAME }}:${{ env.CLI_VERSION_NORMALIZED }}"

          echo "🛠 Building new image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .

          echo "📤 Pushing new image: $IMAGE_TAG"
          docker push $IMAGE_TAG

      - name: Output Status
        run: |
          if [ "${{ env.SKIP_BUILD }}" == "true" ]; then
            echo "★★★ No new Salesforce CLI version detected. Skipping build and push. ★★★"
          else
            echo "★★★ New Salesforce CLI version deployed: ${{ env.CLI_VERSION_NORMALIZED }} ★★★"
          fi
        # ワークフローの最終出力をログに記録
